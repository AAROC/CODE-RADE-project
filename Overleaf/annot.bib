% This is annote.bib
% Author: Sakhile Masoka
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

}

% Paper 1
@ARTICLE{Areski55,
	author	= {Areski Flissi and Philippe Merle},
	title	= {A Generic Deployment Framework for Grid Computing and Distributed Application},
	annote	= {\ \\
			\textbf{Aim:} To present a a generic framework for deploying applications on a grid infrastructure based on an architecture descriptive language (ADL) used to describe the grid infrastructure and the services to be installed. \\
            
			\textbf{Style/Type:} Practical, Technical. \\
            
			\textbf{Cross Reference:} I need to write this. \\
            
			\textbf{Summary:} In this paper the authors describe the inefficiencies of current methods of deploying applications on a grid infrastructure which basically involves downloading, unzipping the files and installing the binaries while solving dependency issues. This task is usually done by system administrators manually. The framework proposed is an automated system which normal users only have to decsribe their configurations in a simple language and use the framework to instantiate the deployment. Three key principles are described which the framework relies on, which are everything is reified as components, provides a common library of deployment components, and finally personalities written once by developers for specific technology or software. The papers continues to explain how the framework itself is implemented and shows how users would typically describe the configuration using the ADL. Lastly, the performance of the deployment time is approximately growing linearly with the number of nodes. \\
			}	
}

% Paper 2
@ARTICLE{Hou09,
	author	= {Zhengxiong Hou and Jing Tie and Xingshe Zhou and Foster, I. and Wilde, M. },
	title	= {ADEM: Automating deployment and management of application software on the Open Science Grid},
    year	= {2009},
    pages	= {130-137},
    publisher	= {IEEE},
	annote	= {\ \\
			\textbf{Aim:} To describe ADEM, an automation tool for grid application software deployment and management, and demonstrate and evaluate the tool on the Open Science Grid. \\

			\textbf{Style/Type:} Practical, Technical. \\

			\textbf{Cross Reference:} The software ADEM is compared to other softwares that are trying to solve the same problem of automation of application deployment on the grid infrastructure. Some of these softwares mantioned are Quattor, Tank and Spark, and Distributed Ant. Section 2 title "Related Work" lists all of them. \\

			\textbf{Summary:} The authors of the articles describe firstly how manual deployment and management of application software packages usually require expertise about the underlying system platforms and application and how the process is prone to errors and does not scale to large grid environments. The features of ADEM, the tool presented is described in it workflow which automatically determines the available grid sites, their resource configuration information, platform signatures , deploys the application in parallel, checks and installs dependencies and lastly checks the successfulness. ADEM architecture is then described, explaining all the components responsible for different features. Next, the practical experiment is explained, along with the installation success rate, scalability and the time cost. In the conclussion, benefits is using ADEM are emphasized and future enhancement are highlighted.   \\
			}	
}

% Paper 3
@ARTICLE{Slawinski14,
	author	= {Slawinski, J and Sunderam, V.},
	title	= {Autonomic Multi-target Deployment of Science and Engineering HPC Applications},
    year	= {2014},
    pages	= {180-189},
    publisher	= {IEEE},
	annote	= {\ \\
			\textbf{Aim:} To introduce ADAPT, a tool that concentrates on provisioning scientific and engineering software and addresses its extraordinary needs.  \\

			\textbf{Style/Type:} Technical Proof of Concept \\

			\textbf{Cross Reference:}  \\

			\textbf{Summary:}  The paper presents a novel tool called ADAPT, that deploys applications on an infrastructure, either cloud or traditional HPC systems. Method being used is an autonomic execution monitor that exploits feedback from the runtime and resolves missing dependencies. The introduction briefly describes the need for ADAPT, as it makes it easier to deployment in heterogeous system, and will help with the trend of scientist avoiding new infrastructure to avoid the burden of deploying applications. This leads to describing existing tools with their limitations. Next, ADAPT is described as tool that responds to errors at run time during a deployment, which set its apart from other tools. The execution and deployment model is explained with snippets of code and outputs, which shows how ADAPT auto respond to errors. An example is shown and reported the installation time versus the manual installation using tradictional method. Lastly, future work on the software is discussed and the conclusion follows. \\
			}
}
            
% Paper 4
% Should I do this one or the 2005 paper????
@ARTICLE{Goscinski04,
	author	= {Goscinski, W. and Abramson, D.},
	title	= {Distributed Ant: A System to Support Application Deployment in the Grid},
    year	= {2004},
    pages	= {436-443},
    publisher	= {IEEE},
	annote	= {\ \\
			\textbf{Aim:} Presents a motivation, design and implementation of a grid scalable, user-oriented, secure application deployment system, Distributed Ant (DistAnt).  \\

			\textbf{Style/Type:} Technical \\

			\textbf{Cross Reference:} I need to write this. \\

			\textbf{Summary:} The article presents DistAnt, a simple, scalable and secure deployment environment with a uniqueness of approaching application deployment from a grid perspective. This allows users to deploy applications without having the high authority of a systems administrators or super users. Next, existing tools are described with their success and limitations including a similar implementation called GridAnt. The nature of DistAnt acts a proxy, performing actions on behalf of the user who is authenticated in the infrastructure. The articles continues to describe technologies DistAnt is built on,  and how it is implemented. All major components namely, Ant tasks, Ant client and Ant service, are described with their functions. Lastly, the conclusion of the article, which stresses the need of the software to be undergo indepth testing to yield interesting results and future publications as this is a research in progress.   \\
			}
}            
            
% Paper 5
@ARTICLE{David14,
	author	= {Bernstein, David },
	title	= {Containers and Cloud: From LXC to Docker to Kubernetes},
    year	= {2014},
    pages	= {81-84},
    volume	= {1},
    issue	= {3},
    publisher	= {IEEE},
	annote	= {\ \\
			\textbf{Aim:} To explain the evolving of LXC (Linux Kernel Containers) to Docker, and Kubernetes as an open source orchestration system for Docker containers. \\
            
			\textbf{Style/Type:} Theoretical \\
            
			\textbf{Cross Reference:} The Docker technology is greatly compared with VMware EXSi Hyperviser \citep{vmware15}, which is ideal for when applications on the same infrastructure require different operating systems. \\
            
			\textbf{Summary:} Docker containers provides a systematic way to automate application deployment inside portable containers. Docker extends LXC with kernel-application API that together run a process of isolation. There are three main Docker elements, Docker containers, Docker images and Dockerfiles. Docker containers contains everything about an application, while Docker images are snapshots of containers. Dockerfiles are a set of scripts that automates the building process of images. In terms of security, Docker can be configured to run per host or per virtual machine to ensure complete isolation. Different levels of abstrations are discussed in detailed. Lastly, Docker/containers can be managed by application clustering especially when used in a PaaS (Platform-as-a-Service). This is where Kubernetes comes in as a cluster manager for Docker containers \cite{Kubernetes15,Kub_official15}. \\
			}
}            p

% Paper 6
@ARTICLE{Areski55,
	author	= {Areski Flissi and Philippe Merle},
	title	= {A Generic Deployment Framework for Grid Computing and Distributed Application},
	annote	= {\ \\
			\textbf{Aim:} I need to write this. \\
			\textbf{Style/Type:} I need to write this. \\
			\textbf{Cross Reference:} I need to write this. \\
			\textbf{Summary:} I need to write this. \\
			}
}   

% URL citations
% VMware Hyperviser

@misc{vmware15,
  title = {{VMware ESXi}},
  howpublished = "\url{http://www.vmware.com/products/esxi-and-esx/overview}",
  year = {2015}, 
  note = "[Online; accessed 2015-04-25]"
}

%%

@book{Miln89,
  author    = {"Milner, R."},
  title     = {"Communication and concurrency"},
  year      = {1989},
  publisher = {"Prentice Hall"},
  address   = {"Hemel Hempstead, United Kingdom"},
  annote    = {"\ \\
                  \textbf{Aim:} To present a mathematical model of
                  concurrency called Calculus of Communicating Systems
                  (CCS) based on the notion of a process where behaviour
                  is modelled in terms of a labelled transition system
                  and processes with similar behaviour are equated by
                  relations over these labelled transition systems. \\ \\

                  \textbf{Style/Type:} textbook, theoretical. \\ \\
 
                  \textbf{Cross references:} The process algebra presented
                  here has been extended in a number of different ways
                  to express different aspects of concurrent behaviour,
                  such as location, causality, time and probability. Two
                  articles that deal with location are \citet{Cast95}
                  and \citet{Boud:91}. \\ \\

                  \textbf{Summary:} This book presents the theory of CCS
                  in a textbook format. The presentation starts with
                  simple examples of concurrent behaviour, briefly
                  investigates when processes should be considered
                  equal and then presents the transition semantics for
                  processes. Both the basic calculus and the value passing
                  calculus are presented -- the value-passing calculus
                  can be translated into the basic calculus. Next,
                  various equational laws are explained and justified,
                  after which strong and weak bisimulation equivalences
                  are introduced together with more complex examples. The
                  last part of the book covers more advanced topics such
                  as defining a programming language using CCS, definition
                  of new operaters and semantic equivalences, as well as
                  specifications and logics. This is a good introduction
                  to CCS and has useful exercises in each chapter.
                  \\"}
}

